!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADT	main/adtTest.h	/^      #define  ADT /;"	d
ADT_TEST_H	main/adtTest.h	/^#define ADT_TEST_H$/;"	d
ARRAY_H	util/array.h	/^#define ARRAY_H$/;"	d
ARROW_DOWN_KEY	cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = 66 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_DOWN_KEY	cmd/cmdCharDef.h	/^   ARROW_DOWN_KEY   = TA_ARROW_DOWN_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = ARROW_UP_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_BEGIN	cmd/cmdCharDef.h	/^   ARROW_KEY_BEGIN  = TA_ARROW_KEY_BEGIN,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmd/cmdCharDef.h	/^   ARROW_KEY_END    = ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_KEY_END	cmd/cmdCharDef.h	/^   ARROW_KEY_END    = TA_ARROW_KEY_END,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = 1 << 8,$/;"	e	enum:ParseChar
ARROW_KEY_FLAG	cmd/cmdCharDef.h	/^   ARROW_KEY_FLAG   = TA_ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = 91,$/;"	e	enum:ParseChar
ARROW_KEY_INT	cmd/cmdCharDef.h	/^   ARROW_KEY_INT    = TA_ARROW_KEY_INT,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = 68 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_LEFT_KEY	cmd/cmdCharDef.h	/^   ARROW_LEFT_KEY   = TA_ARROW_LEFT_KEY,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = 67 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_RIGHT_KEY	cmd/cmdCharDef.h	/^   ARROW_RIGHT_KEY  = TA_ARROW_RIGHT_KEY,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = 65 + ARROW_KEY_FLAG,$/;"	e	enum:ParseChar
ARROW_UP_KEY	cmd/cmdCharDef.h	/^   ARROW_UP_KEY     = TA_ARROW_UP_KEY,$/;"	e	enum:ParseChar
AdtAddCmd	main/adtTest.h	/^CmdClass(AdtAddCmd);$/;"	v
AdtDeleteCmd	main/adtTest.h	/^CmdClass(AdtDeleteCmd);$/;"	v
AdtPrintCmd	main/adtTest.h	/^CmdClass(AdtPrintCmd);$/;"	v
AdtResetCmd	main/adtTest.h	/^CmdClass(AdtResetCmd);$/;"	v
AdtSortCmd	main/adtTest.h	/^CmdClass(AdtSortCmd);$/;"	v
AdtTest	main/adtTest.h	/^class AdtTest$/;"	c
AdtTestObj	main/adtTest.cpp	/^AdtTestObj::AdtTestObj()$/;"	f	class:AdtTestObj
AdtTestObj	main/adtTest.h	/^   AdtTestObj(const AdtTestObj& o) : _str(o._str) {}$/;"	f	class:AdtTestObj
AdtTestObj	main/adtTest.h	/^   AdtTestObj(const string& s)$/;"	f	class:AdtTestObj
AdtTestObj	main/adtTest.h	/^class AdtTestObj$/;"	c
AdtType	main/adtTest.h	/^      #define  AdtType /;"	d
Array	util/array.h	/^   Array() : _data(0), _size(0), _capacity(0) {}$/;"	f	class:Array
Array	util/array.h	/^class Array$/;"	c
BACK_SPACE_CHAR	cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = 8,$/;"	e	enum:ParseChar
BACK_SPACE_CHAR	cmd/cmdCharDef.h	/^   BACK_SPACE_CHAR  = TA_BACK_SPACE_CHAR,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = 127,$/;"	e	enum:ParseChar
BACK_SPACE_KEY	cmd/cmdCharDef.h	/^   BACK_SPACE_KEY   = TA_BACK_SPACE_KEY,$/;"	e	enum:ParseChar
BEEP_CHAR	cmd/cmdCharDef.h	/^   BEEP_CHAR        = 7,$/;"	e	enum:ParseChar
BEEP_CHAR	cmd/cmdCharDef.h	/^   BEEP_CHAR        = TA_BEEP_CHAR,$/;"	e	enum:ParseChar
BST_H	util/bst.h	/^#define BST_H$/;"	d
BSTree	util/bst.h	/^   BSTree() : _root(0), _size(0),$/;"	f	class:BSTree
BSTree	util/bst.h	/^class BSTree$/;"	c
BSTreeNode	util/bst.h	/^   BSTreeNode(const T& x, BSTreeNode<T>* l=0, BSTreeNode<T>* r=0)$/;"	f	class:BSTreeNode
BSTreeNode	util/bst.h	/^class BSTreeNode$/;"	c
CMD_CHAR_DEF_H	cmd/cmdCharDef.h	/^#define CMD_CHAR_DEF_H$/;"	d
CMD_EXEC_DONE	cmd/cmdParser.h	/^   CMD_EXEC_DONE  = 0,$/;"	e	enum:CmdExecStatus
CMD_EXEC_ERROR	cmd/cmdParser.h	/^   CMD_EXEC_ERROR = 1,$/;"	e	enum:CmdExecStatus
CMD_EXEC_NOP	cmd/cmdParser.h	/^   CMD_EXEC_NOP   = 3,$/;"	e	enum:CmdExecStatus
CMD_EXEC_QUIT	cmd/cmdParser.h	/^   CMD_EXEC_QUIT  = 2,$/;"	e	enum:CmdExecStatus
CMD_EXEC_TOT	cmd/cmdParser.h	/^   CMD_EXEC_TOT$/;"	e	enum:CmdExecStatus
CMD_OPT_ERROR_TOT	cmd/cmdParser.h	/^   CMD_OPT_ERROR_TOT$/;"	e	enum:CmdOptionError
CMD_OPT_EXTRA	cmd/cmdParser.h	/^   CMD_OPT_EXTRA      = 1,$/;"	e	enum:CmdOptionError
CMD_OPT_FOPEN_FAIL	cmd/cmdParser.h	/^   CMD_OPT_FOPEN_FAIL = 3,$/;"	e	enum:CmdOptionError
CMD_OPT_ILLEGAL	cmd/cmdParser.h	/^   CMD_OPT_ILLEGAL    = 2,$/;"	e	enum:CmdOptionError
CMD_OPT_MISSING	cmd/cmdParser.h	/^   CMD_OPT_MISSING    = 0,$/;"	e	enum:CmdOptionError
CMD_PARSER_H	cmd/cmdParser.h	/^#define CMD_PARSER_H$/;"	d
CmdClass	cmd/cmdParser.h	/^#define CmdClass(/;"	d
CmdExec	cmd/cmdParser.h	/^   CmdExec() {}$/;"	f	class:CmdExec
CmdExec	cmd/cmdParser.h	/^class CmdExec$/;"	c
CmdExecStatus	cmd/cmdParser.h	/^enum CmdExecStatus$/;"	g
CmdMap	cmd/cmdParser.h	/^typedef map<const string, CmdExec*>   CmdMap;$/;"	t	class:CmdParser
CmdOptionError	cmd/cmdParser.h	/^enum CmdOptionError$/;"	g
CmdParser	cmd/cmdParser.h	/^   CmdParser(const string& p) : _prompt(p), _dofile(0),$/;"	f	class:CmdParser
CmdParser	cmd/cmdParser.h	/^class CmdParser$/;"	c
CmdRegPair	cmd/cmdParser.h	/^typedef pair<const string, CmdExec*>  CmdRegPair;$/;"	t	class:CmdParser
DELETE_KEY	cmd/cmdCharDef.h	/^   DELETE_KEY       = 51 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
DELETE_KEY	cmd/cmdCharDef.h	/^   DELETE_KEY       = TA_DELETE_KEY,$/;"	e	enum:ParseChar
DLIST_H	util/dlist.h	/^#define DLIST_H$/;"	d
DList	util/dlist.h	/^   DList() {$/;"	f	class:DList
DList	util/dlist.h	/^class DList$/;"	c
DListNode	util/dlist.h	/^   DListNode(const T& d, DListNode<T>* p = 0, DListNode<T>* n = 0):$/;"	f	class:DListNode
DListNode	util/dlist.h	/^class DListNode$/;"	c
END_KEY	cmd/cmdCharDef.h	/^   END_KEY          = 52 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
END_KEY	cmd/cmdCharDef.h	/^   END_KEY          = TA_END_KEY,$/;"	e	enum:ParseChar
ESC_KEY	cmd/cmdCharDef.h	/^   ESC_KEY          = 27,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
ESC_KEY	cmd/cmdCharDef.h	/^   ESC_KEY          = TA_ESC_KEY,         \/\/ Not printable; used for combo keys$/;"	e	enum:ParseChar
HOME_KEY	cmd/cmdCharDef.h	/^   HOME_KEY         = 49 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
HOME_KEY	cmd/cmdCharDef.h	/^   HOME_KEY         = TA_HOME_KEY,$/;"	e	enum:ParseChar
INPUT_END_KEY	cmd/cmdCharDef.h	/^   INPUT_END_KEY    = 4,          \/\/ ctrl-d$/;"	e	enum:ParseChar
INPUT_END_KEY	cmd/cmdCharDef.h	/^   INPUT_END_KEY    = TA_INPUT_END_KEY,   \/\/ ctrl-d$/;"	e	enum:ParseChar
INSERT_KEY	cmd/cmdCharDef.h	/^   INSERT_KEY       = 50 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
INSERT_KEY	cmd/cmdCharDef.h	/^   INSERT_KEY       = TA_INSERT_KEY,$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = 1,          \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_BEGIN_KEY	cmd/cmdCharDef.h	/^   LINE_BEGIN_KEY   = TA_LINE_BEGIN_KEY,  \/\/ ctrl-a$/;"	e	enum:ParseChar
LINE_END_KEY	cmd/cmdCharDef.h	/^   LINE_END_KEY     = 5,          \/\/ ctrl-e$/;"	e	enum:ParseChar
LINE_END_KEY	cmd/cmdCharDef.h	/^   LINE_END_KEY     = TA_LINE_END_KEY,    \/\/ ctrl-e$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = HOME_KEY,$/;"	e	enum:ParseChar
MOD_KEY_BEGIN	cmd/cmdCharDef.h	/^   MOD_KEY_BEGIN    = TA_MOD_KEY_BEGIN,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = 126,$/;"	e	enum:ParseChar
MOD_KEY_DUMMY	cmd/cmdCharDef.h	/^   MOD_KEY_DUMMY    = TA_MOD_KEY_DUMMY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmd/cmdCharDef.h	/^   MOD_KEY_END      = PG_DOWN_KEY,$/;"	e	enum:ParseChar
MOD_KEY_END	cmd/cmdCharDef.h	/^   MOD_KEY_END      = TA_MOD_KEY_END,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = 1 << 9,$/;"	e	enum:ParseChar
MOD_KEY_FLAG	cmd/cmdCharDef.h	/^   MOD_KEY_FLAG     = TA_MOD_KEY_FLAG,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmd/cmdCharDef.h	/^   MOD_KEY_INT      = 91,$/;"	e	enum:ParseChar
MOD_KEY_INT	cmd/cmdCharDef.h	/^   MOD_KEY_INT      = TA_MOD_KEY_INT,$/;"	e	enum:ParseChar
MYCLK_TCK	util/myUsage.h	/^#define MYCLK_TCK /;"	d
MYCLK_TCK	util/myUsage.h	/^#undef MYCLK_TCK$/;"	d
MY_USAGE_H	util/myUsage.h	/^#define MY_USAGE_H$/;"	d
MyUsage	util/myUsage.h	/^   MyUsage() { reset(); }$/;"	f	class:MyUsage
MyUsage	util/myUsage.h	/^class MyUsage$/;"	c
N	main/adtTest.h	/^#define N /;"	d
NEWLINE_KEY	cmd/cmdCharDef.h	/^   NEWLINE_KEY      = TA_NEWLINE_KEY,     \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
NEWLINE_KEY	cmd/cmdCharDef.h	/^   NEWLINE_KEY      = int('\\n'),  \/\/ enter('\\n') or ctrl-m$/;"	e	enum:ParseChar
PARSE_CHAR_END	cmd/cmdCharDef.h	/^   PARSE_CHAR_END$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = 54 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_DOWN_KEY	cmd/cmdCharDef.h	/^   PG_DOWN_KEY      = TA_PG_DOWN_KEY,$/;"	e	enum:ParseChar
PG_OFFSET	cmd/cmdParser.h	/^#define PG_OFFSET /;"	d
PG_UP_KEY	cmd/cmdCharDef.h	/^   PG_UP_KEY        = 53 + MOD_KEY_FLAG,$/;"	e	enum:ParseChar
PG_UP_KEY	cmd/cmdCharDef.h	/^   PG_UP_KEY        = TA_PG_UP_KEY,$/;"	e	enum:ParseChar
ParseChar	cmd/cmdCharDef.h	/^enum ParseChar$/;"	g
RANDOM_ACCESS	main/adtTest.h	/^      #undef   RANDOM_ACCESS$/;"	d
READ_BUF_SIZE	cmd/cmdParser.h	/^#define READ_BUF_SIZE /;"	d
RN_GEN_H	util/rnGen.h	/^#define RN_GEN_H$/;"	d
RandomNumGen	util/rnGen.h	/^      RandomNumGen() { my_srandom(getpid()); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^      RandomNumGen(unsigned seed) { my_srandom(seed); }$/;"	f	class:RandomNumGen
RandomNumGen	util/rnGen.h	/^class RandomNumGen$/;"	c
TAB_KEY	cmd/cmdCharDef.h	/^   TAB_KEY          = TA_TAB_KEY,         \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_KEY	cmd/cmdCharDef.h	/^   TAB_KEY          = int('\\t'),  \/\/ tab('\\t') or Ctrl-i$/;"	e	enum:ParseChar
TAB_POSITION	cmd/cmdParser.h	/^#define TAB_POSITION /;"	d
TA_ARROW_DOWN_KEY	cmd/cmdCharDef.h	/^#define TA_ARROW_DOWN_KEY /;"	d
TA_ARROW_KEY_BEGIN	cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_BEGIN /;"	d
TA_ARROW_KEY_END	cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_END /;"	d
TA_ARROW_KEY_FLAG	cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_FLAG /;"	d
TA_ARROW_KEY_INT	cmd/cmdCharDef.h	/^#define TA_ARROW_KEY_INT /;"	d
TA_ARROW_LEFT_KEY	cmd/cmdCharDef.h	/^#define TA_ARROW_LEFT_KEY /;"	d
TA_ARROW_RIGHT_KEY	cmd/cmdCharDef.h	/^#define TA_ARROW_RIGHT_KEY /;"	d
TA_ARROW_UP_KEY	cmd/cmdCharDef.h	/^#define TA_ARROW_UP_KEY /;"	d
TA_BACK_SPACE_CHAR	cmd/cmdCharDef.h	/^#define TA_BACK_SPACE_CHAR /;"	d
TA_BACK_SPACE_KEY	cmd/cmdCharDef.h	/^#define TA_BACK_SPACE_KEY /;"	d
TA_BEEP_CHAR	cmd/cmdCharDef.h	/^#define TA_BEEP_CHAR /;"	d
TA_DELETE_KEY	cmd/cmdCharDef.h	/^#define TA_DELETE_KEY /;"	d
TA_END_KEY	cmd/cmdCharDef.h	/^#define TA_END_KEY /;"	d
TA_ESC_KEY	cmd/cmdCharDef.h	/^#define TA_ESC_KEY /;"	d
TA_HOME_KEY	cmd/cmdCharDef.h	/^#define TA_HOME_KEY /;"	d
TA_INPUT_END_KEY	cmd/cmdCharDef.h	/^#define TA_INPUT_END_KEY /;"	d
TA_INSERT_KEY	cmd/cmdCharDef.h	/^#define TA_INSERT_KEY /;"	d
TA_LINE_BEGIN_KEY	cmd/cmdCharDef.h	/^#define TA_LINE_BEGIN_KEY /;"	d
TA_LINE_END_KEY	cmd/cmdCharDef.h	/^#define TA_LINE_END_KEY /;"	d
TA_MOD_KEY_BEGIN	cmd/cmdCharDef.h	/^#define TA_MOD_KEY_BEGIN /;"	d
TA_MOD_KEY_DUMMY	cmd/cmdCharDef.h	/^#define TA_MOD_KEY_DUMMY /;"	d
TA_MOD_KEY_END	cmd/cmdCharDef.h	/^#define TA_MOD_KEY_END /;"	d
TA_MOD_KEY_FLAG	cmd/cmdCharDef.h	/^#define TA_MOD_KEY_FLAG /;"	d
TA_MOD_KEY_INT	cmd/cmdCharDef.h	/^#define TA_MOD_KEY_INT /;"	d
TA_NEWLINE_KEY	cmd/cmdCharDef.h	/^#define TA_NEWLINE_KEY /;"	d
TA_PG_DOWN_KEY	cmd/cmdCharDef.h	/^#define TA_PG_DOWN_KEY /;"	d
TA_PG_UP_KEY	cmd/cmdCharDef.h	/^#define TA_PG_UP_KEY /;"	d
TA_TAB_KEY	cmd/cmdCharDef.h	/^#define TA_TAB_KEY /;"	d
TA_UNDEFINED_KEY	cmd/cmdCharDef.h	/^#define TA_UNDEFINED_KEY /;"	d
TEST_ARRAY	main/adtTest.h	/^      #undef   TEST_ARRAY$/;"	d
TEST_BST	main/adtTest.h	/^      #undef   TEST_BST$/;"	d
UNDEFINED_KEY	cmd/cmdCharDef.h	/^   UNDEFINED_KEY    = TA_UNDEFINED_KEY,$/;"	e	enum:ParseChar
UNDEFINED_KEY	cmd/cmdCharDef.h	/^   UNDEFINED_KEY  = INT_MAX,$/;"	e	enum:ParseChar
UTIL_H	util/util.h	/^#define UTIL_H$/;"	d
_capacity	util/array.h	/^   size_t       _capacity;   \/\/ max number of elements$/;"	m	class:Array
_cmdMap	cmd/cmdParser.h	/^   CmdMap    _cmdMap;                \/\/ map from string to command$/;"	m	class:CmdParser
_container	main/adtTest.h	/^   AdtType<AdtTestObj>   _container;$/;"	m	class:AdtTest
_currentMem	util/myUsage.h	/^   double     _currentMem;$/;"	m	class:MyUsage
_currentTick	util/myUsage.h	/^   double     _currentTick;$/;"	m	class:MyUsage
_data	util/array.h	/^   T*           _data;$/;"	m	class:Array
_data	util/bst.h	/^   T                _data;$/;"	m	class:BSTreeNode
_data	util/dlist.h	/^   T              _data;$/;"	m	class:DListNode
_dofile	cmd/cmdParser.h	/^   ifstream* _dofile;                \/\/ for command script$/;"	m	class:CmdParser
_dofileStack	cmd/cmdParser.h	/^   stack<ifstream*> _dofileStack;    \/\/ For recursive dofile calling$/;"	m	class:CmdParser
_head	util/bst.h	/^   iterator _head;$/;"	m	class:BSTree
_head	util/dlist.h	/^   DListNode<T>*  _head;  \/\/ = dummy node if list is empty$/;"	m	class:DList
_history	cmd/cmdParser.h	/^   vector<string>   _history;        \/\/ oldest:_history[0],latest:_hist.back()$/;"	m	class:CmdParser
_historyIdx	cmd/cmdParser.h	/^   int              _historyIdx;     \/\/ (1) Position to insert history string$/;"	m	class:CmdParser
_initMem	util/myUsage.h	/^   double     _initMem;$/;"	m	class:MyUsage
_leftChild	util/bst.h	/^   BSTreeNode<T>*   _leftChild;$/;"	m	class:BSTreeNode
_next	util/dlist.h	/^   DListNode<T>*  _next;$/;"	m	class:DListNode
_node	util/array.h	/^      T*    _node;$/;"	m	class:Array::iterator
_node	util/bst.h	/^      BSTreeNode<T>* _node;$/;"	m	class:BSTree::iterator
_node	util/dlist.h	/^      DListNode<T>* _node;$/;"	m	class:DList::iterator
_optCmd	cmd/cmdParser.h	/^   string            _optCmd;$/;"	m	class:CmdExec
_periodUsedTime	util/myUsage.h	/^   double     _periodUsedTime;$/;"	m	class:MyUsage
_prev	util/dlist.h	/^   DListNode<T>*  _prev;$/;"	m	class:DListNode
_prompt	cmd/cmdParser.h	/^   const string _prompt;             \/\/ command prompt$/;"	m	class:CmdParser
_readBuf	cmd/cmdParser.h	/^   char      _readBuf[READ_BUF_SIZE];\/\/ save the current line input$/;"	m	class:CmdParser
_readBufEnd	cmd/cmdParser.h	/^   char*     _readBufEnd;            \/\/ end of string position of _readBuf$/;"	m	class:CmdParser
_readBufPtr	cmd/cmdParser.h	/^   char*     _readBufPtr;            \/\/ point to the cursor position$/;"	m	class:CmdParser
_rightChild	util/bst.h	/^   BSTreeNode<T>*   _rightChild;$/;"	m	class:BSTreeNode
_root	util/bst.h	/^   BSTreeNode<T>* _root;$/;"	m	class:BSTree
_size	util/array.h	/^   size_t       _size;       \/\/ number of valid elements$/;"	m	class:Array
_size	util/bst.h	/^   size_t _size;$/;"	m	class:BSTree
_str	main/adtTest.h	/^   string      _str;  \/\/ _str.length() should alywas <= _strLen$/;"	m	class:AdtTestObj
_strLen	main/adtTest.cpp	/^int AdtTestObj::_strLen = 6;$/;"	m	class:AdtTestObj	file:
_strLen	main/adtTest.h	/^   static int  _strLen;$/;"	m	class:AdtTestObj
_tail	util/bst.h	/^   iterator _tail;$/;"	m	class:BSTree
_tempCmdStored	cmd/cmdParser.h	/^   bool      _tempCmdStored;         \/\/ When up\/pgUp is pressed, current line$/;"	m	class:CmdParser
_totalUsedTime	util/myUsage.h	/^   double     _totalUsedTime;$/;"	m	class:MyUsage
_trace	util/bst.h	/^      vector< BSTreeNode<T>* > _trace;$/;"	m	class:BSTree::iterator
add	main/adtTest.h	/^   void add() { add(AdtTestObj()); }$/;"	f	class:AdtTest
add	main/adtTest.h	/^   void add(const AdtTestObj& o) {$/;"	f	class:AdtTest
adtTest	main/adtTest.cpp	/^AdtTest adtTest;$/;"	v
begin	util/array.h	/^   iterator begin() const $/;"	f	class:Array
begin	util/bst.h	/^   iterator begin() const { return _head; }$/;"	f	class:BSTree
begin	util/dlist.h	/^   iterator begin() const { return empty()? 0 : iterator(_head->_next); }$/;"	f	class:DList
checkMem	util/myUsage.h	/^   double checkMem() const {$/;"	f	class:MyUsage
checkTick	util/myUsage.h	/^   double checkTick() const {$/;"	f	class:MyUsage
clear	util/array.h	/^   void clear() { _size = 0; }$/;"	f	class:Array
clear	util/bst.h	/^   void clear()$/;"	f	class:BSTree
clear	util/dlist.h	/^   void clear()      \/\/ delete all nodes except for the dummy node$/;"	f	class:DList
degree	util/bst.h	/^   size_t degree(const BSTreeNode<T>* n)$/;"	f	class:BSTree
deleteAll	main/adtTest.h	/^   void deleteAll() { _container.clear(); }$/;"	f	class:AdtTest
deleteBack	main/adtTest.h	/^   void deleteBack(size_t repeat = 1) {$/;"	f	class:AdtTest
deleteFront	main/adtTest.h	/^   void deleteFront(size_t repeat = 1) {$/;"	f	class:AdtTest
deleteNode	util/bst.h	/^   bool deleteNode(iterator i, const size_t deg)$/;"	f	class:BSTree
deleteObj	main/adtTest.h	/^   bool deleteObj(const AdtTestObj& o) { return _container.erase(o); }$/;"	f	class:AdtTest
deleteRandom	main/adtTest.h	/^   void deleteRandom(size_t repeat = 1) {$/;"	f	class:AdtTest
empty	util/array.h	/^   bool empty() const { return (_capacity==0 || _size==0); }$/;"	f	class:Array
empty	util/bst.h	/^   bool empty() const { return (_size == 0); }$/;"	f	class:BSTree
empty	util/dlist.h	/^   bool empty() const { return (_head->_next == _head); }$/;"	f	class:DList
end	util/array.h	/^   iterator end() const $/;"	f	class:Array
end	util/bst.h	/^   iterator end() const $/;"	f	class:BSTree
end	util/dlist.h	/^   iterator end() const { return empty()? 0 :iterator(_head); }$/;"	f	class:DList
erase	util/array.h	/^   bool erase(const T& x) { $/;"	f	class:Array
erase	util/array.h	/^   bool erase(iterator pos) $/;"	f	class:Array
erase	util/bst.h	/^   bool erase(const T& x)$/;"	f	class:BSTree
erase	util/bst.h	/^   bool erase(iterator i)$/;"	f	class:BSTree
erase	util/dlist.h	/^   bool erase(const T& x) $/;"	f	class:DList
erase	util/dlist.h	/^   bool erase(iterator pos)$/;"	f	class:DList
exec	main/adtTest.cpp	/^AdtAddCmd::exec(const string& option)$/;"	f	class:AdtAddCmd
exec	main/adtTest.cpp	/^AdtDeleteCmd::exec(const string& option)$/;"	f	class:AdtDeleteCmd
exec	main/adtTest.cpp	/^AdtPrintCmd::exec(const string& option)$/;"	f	class:AdtPrintCmd
exec	main/adtTest.cpp	/^AdtResetCmd::exec(const string& option)$/;"	f	class:AdtResetCmd
exec	main/adtTest.cpp	/^AdtSortCmd::exec(const string& option)$/;"	f	class:AdtSortCmd
find	util/bst.h	/^   iterator find(const T& x)$/;"	f	class:BSTree
getNext	util/bst.h	/^      iterator getNext () const$/;"	f	class:BSTree::iterator
getOptCmd	cmd/cmdParser.h	/^   const string& getOptCmd() const { return _optCmd; }$/;"	f	class:CmdExec
getPos	main/adtTest.h	/^   AdtType<AdtTestObj>::iterator getPos(size_t pos) {$/;"	f	class:AdtTest
getPrev	util/bst.h	/^      iterator getPrev() const$/;"	f	class:BSTree::iterator
help	main/adtTest.cpp	/^AdtAddCmd::help() const$/;"	f	class:AdtAddCmd
help	main/adtTest.cpp	/^AdtDeleteCmd::help() const$/;"	f	class:AdtDeleteCmd
help	main/adtTest.cpp	/^AdtPrintCmd::help() const$/;"	f	class:AdtPrintCmd
help	main/adtTest.cpp	/^AdtResetCmd::help() const$/;"	f	class:AdtResetCmd
help	main/adtTest.cpp	/^AdtSortCmd::help() const$/;"	f	class:AdtSortCmd
initAdtCmd	main/adtTest.cpp	/^initAdtCmd()$/;"	f
inorder	util/bst.h	/^   void inorder(BSTreeNode<T>* n, int d=0) const$/;"	f	class:BSTree
insert	util/bst.h	/^   void insert(const T& x)$/;"	f	class:BSTree
insert	util/dlist.h	/^   void insert(iterator head, iterator tail) const$/;"	f	class:DList
isValidVarName	util/myString.cpp	/^isValidVarName(const string& str)$/;"	f
iterator	util/array.h	/^      iterator(T* n= 0): _node(n) {}$/;"	f	class:Array::iterator
iterator	util/array.h	/^      iterator(const iterator& i): _node(i._node) {}$/;"	f	class:Array::iterator
iterator	util/array.h	/^   class iterator$/;"	c	class:Array
iterator	util/bst.h	/^      iterator(BSTreeNode<T>* n, vector< BSTreeNode<T>* > t) : $/;"	f	class:BSTree::iterator
iterator	util/bst.h	/^      iterator(BSTreeNode<T>* n=0) : _node(n) {}$/;"	f	class:BSTree::iterator
iterator	util/bst.h	/^      iterator(const iterator& i) : _node(i._node), _trace(i._trace) {}$/;"	f	class:BSTree::iterator
iterator	util/bst.h	/^   class iterator $/;"	c	class:BSTree
iterator	util/dlist.h	/^      iterator(DListNode<T>* n= 0): _node(n) {}$/;"	f	class:DList::iterator
iterator	util/dlist.h	/^      iterator(const iterator& i) : _node(i._node) {}$/;"	f	class:DList::iterator
iterator	util/dlist.h	/^   class iterator$/;"	c	class:DList
main	main/main.cpp	/^main(int argc, char** argv)$/;"	f
myGetChar	util/myGetChar.cpp	/^char myGetChar()$/;"	f
myGetChar	util/myGetChar.cpp	/^char myGetChar(istream& istr)$/;"	f
myStr2Int	util/myString.cpp	/^myStr2Int(const string& str, int& num)$/;"	f
myStrGetTok	util/myString.cpp	/^myStrGetTok(const string& str, string& tok, size_t pos = 0,$/;"	f
myStrNCmp	util/myString.cpp	/^myStrNCmp(const string& s1, const string& s2, unsigned n)$/;"	f
myUsage	util/util.cpp	/^MyUsage       myUsage;$/;"	v
my_random	util/rnGen.h	/^#define my_random /;"	d
my_srandom	util/rnGen.h	/^#define my_srandom /;"	d
myexit	main/main.cpp	/^myexit()$/;"	f	file:
operator !=	util/array.h	/^      bool operator != (const iterator& i) const { return !(*this==i); }$/;"	f	class:Array::iterator
operator !=	util/bst.h	/^      bool operator != (const iterator& i) { return !(*this == i); }$/;"	f	class:BSTree::iterator
operator !=	util/dlist.h	/^      bool operator != (const iterator& i) const { return !(*this==i); }$/;"	f	class:DList::iterator
operator ()	util/rnGen.h	/^      const int operator() (const int range) const {$/;"	f	class:RandomNumGen
operator *	util/array.h	/^      T& operator * () { return *(_node); }$/;"	f	class:Array::iterator
operator *	util/array.h	/^      const T& operator * () const { return *(_node); }$/;"	f	class:Array::iterator
operator *	util/bst.h	/^      T& operator* () { return _node->_data; }$/;"	f	class:BSTree::iterator
operator *	util/bst.h	/^      const T& operator * () const { return _node->_data; } $/;"	f	class:BSTree::iterator
operator *	util/dlist.h	/^      T& operator * () { return _node->_data; }$/;"	f	class:DList::iterator
operator *	util/dlist.h	/^      const T& operator * () const { return _node->_data; }$/;"	f	class:DList::iterator
operator +	util/array.h	/^      iterator operator + (int i) const { return iterator(_node+i); }$/;"	f	class:Array::iterator
operator ++	util/array.h	/^      iterator  operator ++ (int) { iterator ret(*this);$/;"	f	class:Array::iterator
operator ++	util/array.h	/^      iterator& operator ++ () { ++(_node); return *this; }$/;"	f	class:Array::iterator
operator ++	util/bst.h	/^      iterator operator ++ (int)$/;"	f	class:BSTree::iterator
operator ++	util/bst.h	/^      iterator& operator ++ () $/;"	f	class:BSTree::iterator
operator ++	util/dlist.h	/^      iterator operator ++ (int) { iterator ret(*this); $/;"	f	class:DList::iterator
operator ++	util/dlist.h	/^      iterator& operator ++ () { _node = _node->_next; return *(this); }$/;"	f	class:DList::iterator
operator +=	util/array.h	/^      iterator& operator += (int i) { _node+=i; return *(this); }$/;"	f	class:Array::iterator
operator -	util/array.h	/^      iterator operator - (int i) const { return iterator(_node-i); }$/;"	f	class:Array::iterator
operator --	util/array.h	/^      iterator  operator -- (int) { iterator ret(*this);$/;"	f	class:Array::iterator
operator --	util/array.h	/^      iterator& operator -- () { --(_node); return *this; }$/;"	f	class:Array::iterator
operator --	util/bst.h	/^      iterator  operator -- (int){$/;"	f	class:BSTree::iterator
operator --	util/bst.h	/^      iterator& operator -- () {$/;"	f	class:BSTree::iterator
operator --	util/dlist.h	/^      iterator operator -- (int) { iterator ret(*this);$/;"	f	class:DList::iterator
operator --	util/dlist.h	/^      iterator& operator -- () { _node = _node->_prev; return *(this); }$/;"	f	class:DList::iterator
operator <	main/adtTest.h	/^   bool operator < (const AdtTestObj& o) const { return (_str < o._str); }$/;"	f	class:AdtTestObj
operator <<	main/adtTest.cpp	/^ostream& operator << (ostream& os, const AdtTestObj& o)$/;"	f
operator =	util/array.h	/^      iterator& operator = (const iterator& i) { _node = i._node; return *(this); }$/;"	f	class:Array::iterator
operator =	util/bst.h	/^      iterator& operator = (const iterator& i){$/;"	f	class:BSTree::iterator
operator =	util/dlist.h	/^      iterator& operator = (const iterator& i) { _node = i._node; return *(this); }$/;"	f	class:DList::iterator
operator ==	main/adtTest.h	/^   bool operator == (const AdtTestObj& o) const { return (_str == o._str); }$/;"	f	class:AdtTestObj
operator ==	util/array.h	/^      bool operator == (const iterator& i) const { return (_node==i._node); }$/;"	f	class:Array::iterator
operator ==	util/bst.h	/^      bool operator == (const iterator& i) { return (_node == i._node); }$/;"	f	class:BSTree::iterator
operator ==	util/dlist.h	/^      bool operator == (const iterator& i) const { return (_node == i._node); }$/;"	f	class:DList::iterator
operator []	util/array.h	/^   T& operator [] (size_t i) { return _data[0]; }$/;"	f	class:Array
operator []	util/array.h	/^   const T& operator [] (size_t i) const { return _data[0]; }$/;"	f	class:Array
pop_back	util/array.h	/^   void pop_back() $/;"	f	class:Array
pop_back	util/bst.h	/^   void pop_back()$/;"	f	class:BSTree
pop_back	util/dlist.h	/^   void pop_back() $/;"	f	class:DList
pop_front	util/array.h	/^   void pop_front() $/;"	f	class:Array
pop_front	util/bst.h	/^   void pop_front()$/;"	f	class:BSTree
pop_front	util/dlist.h	/^   void pop_front() $/;"	f	class:DList
prev	util/dlist.h	/^   #define prev(/;"	d
print	main/adtTest.h	/^   void print(bool reverse = false, bool verbose = false) {$/;"	f	class:AdtTest
print	util/bst.h	/^   void print() const$/;"	f	class:BSTree
printBackward	main/adtTest.h	/^   void printBackward() {$/;"	f	class:AdtTest
printData	main/adtTest.h	/^   void printData(size_t idx, AdtType<AdtTestObj>::iterator li,$/;"	f	class:AdtTest
printForward	main/adtTest.h	/^   void printForward() {$/;"	f	class:AdtTest
printPrompt	cmd/cmdParser.h	/^   void printPrompt() const { cout << _prompt; }$/;"	f	class:CmdParser
push_back	util/array.h	/^   void push_back(const T& x) $/;"	f	class:Array
push_back	util/bst.h	/^   void push_back(const T& x)$/;"	f	class:BSTree
push_back	util/dlist.h	/^   void push_back(const T& x) $/;"	f	class:DList
push_front	util/bst.h	/^   void push_front(const T& x)$/;"	f	class:BSTree
report	util/myUsage.h	/^   void report(bool repTime, bool repMem) {$/;"	f	class:MyUsage
reserve	util/array.h	/^   void reserve(size_t n) $/;"	f	class:Array
reset	main/adtTest.h	/^   void reset(int len) { deleteAll(); AdtTestObj::setLen(len); }$/;"	f	class:AdtTest
reset	util/myUsage.h	/^   void reset() {$/;"	f	class:MyUsage
resetBufAndPrintPrompt	cmd/cmdParser.h	/^   void resetBufAndPrintPrompt() {$/;"	f	class:CmdParser
reset_keypress	util/myGetChar.cpp	/^static void reset_keypress(void)$/;"	f	file:
setLen	main/adtTest.h	/^   static void setLen(int len) { _strLen = len; }$/;"	f	class:AdtTestObj
setMemUsage	util/myUsage.h	/^   void setMemUsage() { _currentMem = checkMem() - _initMem; }$/;"	f	class:MyUsage
setOptCmd	cmd/cmdParser.h	/^   void setOptCmd(const string& str) { _optCmd = str; }$/;"	f	class:CmdExec
setTimeUsage	util/myUsage.h	/^   void setTimeUsage() {$/;"	f	class:MyUsage
set_keypress	util/myGetChar.cpp	/^static void set_keypress(void)$/;"	f	file:
size	util/array.h	/^   size_t size() const { return _size; }$/;"	f	class:Array
size	util/bst.h	/^   size_t size() const { return _size; } $/;"	f	class:BSTree
size	util/dlist.h	/^   size_t size() const $/;"	f	class:DList
sort	main/adtTest.h	/^   void sort() { _container.sort(); }$/;"	f	class:AdtTest
sort	util/array.h	/^   void sort() const { if (!empty()) ::sort(_data, _data+_size); }$/;"	f	class:Array
sort	util/bst.h	/^   void sort() const {}    \/\/No need to implement.$/;"	f	class:BSTree
sort	util/dlist.h	/^   void sort() const $/;"	f	class:DList
stored_settings	util/myGetChar.cpp	/^static struct termios stored_settings;$/;"	v	typeref:struct:termios	file:
swap	util/dlist.h	/^   #define swap(/;"	d
taTestOnly	cmd/cmdParser.h	/^   void taTestOnly() {}$/;"	f	class:CmdParser
usage	main/adtTest.cpp	/^AdtAddCmd::usage(ostream& os) const$/;"	f	class:AdtAddCmd
usage	main/adtTest.cpp	/^AdtDeleteCmd::usage(ostream& os) const$/;"	f	class:AdtDeleteCmd
usage	main/adtTest.cpp	/^AdtPrintCmd::usage(ostream& os) const$/;"	f	class:AdtPrintCmd
usage	main/adtTest.cpp	/^AdtResetCmd::usage(ostream& os) const$/;"	f	class:AdtResetCmd
usage	main/adtTest.cpp	/^AdtSortCmd::usage(ostream& os) const$/;"	f	class:AdtSortCmd
usage	main/main.cpp	/^usage()$/;"	f	file:
~Array	util/array.h	/^   ~Array() { delete []_data; }$/;"	f	class:Array
~BSTree	util/bst.h	/^   ~BSTree() { clear(); }$/;"	f	class:BSTree
~CmdExec	cmd/cmdParser.h	/^   virtual ~CmdExec() {}$/;"	f	class:CmdExec
~CmdParser	cmd/cmdParser.h	/^   virtual ~CmdParser() {}$/;"	f	class:CmdParser
~DList	util/dlist.h	/^   ~DList() { clear(); delete _head; }$/;"	f	class:DList
~iterator	util/array.h	/^      ~iterator() {} \/\/ Should NOT delete _node$/;"	f	class:Array::iterator
~iterator	util/bst.h	/^      ~iterator() {}$/;"	f	class:BSTree::iterator
~iterator	util/dlist.h	/^      ~iterator() {} \/\/ Should NOT delete _node$/;"	f	class:DList::iterator
